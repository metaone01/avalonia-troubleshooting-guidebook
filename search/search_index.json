{"config":{"lang":["en","zh"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Avalonia \u6545\u969c\u6392\u9664\u6307\u5357","text":"<p>\u7531\u4e8eAvalonia\u7684\u6587\u6863\u4e0d\u5168\u9762\uff0c\u591a\u7cfb\u7edf\u5f00\u53d1\u9047\u5230\u7684\u5751\u4e5f\u8f83\u591a\uff0c\u6545\u521b\u5efa\u6b64\u6307\u5357\u4ee5\u8bb0\u5f55\u5404\u79cd\u9519\u8bef\u53ca\u5176\u89e3\u51b3\u65b9\u6848\uff0c\u56de\u7b54\u65b0\u624b\u7591\u95ee\u3002</p> <p>\u5982\u679c\u60a8\u89c9\u5f97\u672c\u6307\u5357\u5e2e\u5230\u4e86\u6216\u5c06\u4f1a\u5e2e\u52a9\u5230\u60a8\uff0c\u8fd8\u8bf7Star\u672c\u9879\u76ee\u3002</p> <p>Note</p> <p>\u672c\u6307\u5357\u7684\u8986\u76d6\u8303\u56f4\u5305\u62ec\u6240\u6709\u7f16\u5199Avalonia\u7a0b\u5e8f\u4f1a\u9047\u5230\u7684\u9519\u8bef\uff0c\u65e0\u8bba\u9519\u8bef\u672c\u8eab\u4e0eAvalonia\u662f\u5426\u76f8\u5173\u3002</p>"},{"location":"Avalonia/can-avalonia-embed-html/","title":"Avalonia \u53ef\u4ee5\u5185\u5d4c Html \u5417\uff1f","text":"<p>\u53ef\u4ee5\u8003\u8651\u4ee5\u4e0b\u9879\u76ee\uff1a</p> <ul> <li>Webviews.Avalonia</li> <li>WebView</li> <li>CefGlue</li> <li>\u3010\u5b98\u65b9\u3011\u3010\u4ed8\u8d39\u3011Avalonia Accelerate</li> <li>\u3010\u4ed8\u8d39\u3011DotNetBrowser</li> <li>\u3010\u7b80\u5355\u6e32\u67d3\u3011Avalonia.HtmlRenderer</li> </ul> <p>\ud83d\udc96 \u63d0\u4f9b\u8005 kongdetuo</p> <p>\ud83d\udd17 \u539f\u6587\u6863\u94fe\u63a5 Avalonia \u5e38\u89c1\u95ee\u9898</p> <p>\uff08\u5df2\u83b7\u5f97\u539f\u4f5c\u8005\u8bb8\u53ef,\u6709\u6539\u52a8\uff09</p>","tags":["Avalonia","Web"]},{"location":"Avalonia/Binding/how-to-bind-datatable/","title":"\u5982\u4f55\u7ed1\u5b9a DataTable","text":"","tags":["Avalonia","Binding"]},{"location":"Avalonia/Binding/how-to-bind-datatable/#_1","title":"\u80cc\u666f","text":"<p>Avalonia \u652f\u6301\u5e38\u89c1\u7684\u96c6\u5408\u7c7b\u578b\uff0c\u4f46\u662f DataTable \u5e76\u975e\u96c6\u5408\u65e0\u6cd5\u76f4\u63a5\u7ed1\u5b9a\u3002DataTable.Rows \u548c DataTable.DefaultView \u662f\u96c6\u5408\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u6570\u636e\u6e90\u4f7f\u7528\uff0c\u4f46\u662f DataRow \u548c DataRowView \u4e0d\u662f\u6807\u51c6\u6570\u636e\u7c7b\u578b\uff0c\u7ed1\u5b9a\u5f15\u64ce\u65e0\u6cd5\u6b63\u786e\u8bc6\u522b\uff0c\u672c\u6587\u8bb0\u5f55\u4e24\u79cd\u65b9\u6cd5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002</p> <p>Info</p> <p>\u4e24\u79cd\u65b9\u6cd5\u90fd\u53ef\u4ee5\u6b63\u5e38\u5c55\u793a\u6570\u636e\uff0c\u76ee\u524d\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u505a\u7684\u4e8b\u60c5\u57fa\u672c\u4e00\u81f4\uff0c\u65b9\u6cd5\u4e00\u6bd4\u8f83\u7b80\u5355\uff0c\u65b9\u6cd5\u4e8c\u5728\u672a\u6765\u53ef\u80fd\u6709\u66f4\u597d\u7684\u652f\u6301\uff0c\u8bf7\u6309\u9700\u9009\u62e9\u3002</p> <p>\u4e24\u79cd\u65b9\u6cd5\u90fd\u4f7f\u7528 DataRowView\uff0c\u56e0\u4e3a\u5b83\u5b9e\u73b0\u4e86 INotifyPropertyChanged \u63a5\u53e3, \u7ed1\u5b9a\u8d77\u6765\u65b9\u4fbf\u4e00\u4e9b\u3002</p> <p>Tip</p> <p>\u5982\u9700\u5206\u7ec4\uff0c\u9700\u8981\u7ee7\u627f DataGridGroupDescription \u7f16\u5199\u5206\u7ec4\u903b\u8f91\uff0c\u5185\u7f6e\u7684 DataGridPathGroupDescription \u4e0d\u592a\u884c\u3002</p> <p>Tip</p> <p>\u7531\u4e8e DataGrid \u7684\u7ed1\u5b9a\u5b9e\u73b0\uff0c\u73b0\u5728\u603b\u662f\u53ea\u8bfb\u7684\uff0c\u5982\u679c\u9700\u8981\u7f16\u8f91\uff0c\u8bf7\u4f7f\u7528\u6a21\u677f\u5217 \u6216\u8005 fork Avalonia.Controls.DataGrid \u4fee\u6539\u3002</p> <p>Warning</p> <p>\u65b9\u6cd5\u4e00\u65e0\u6cd5\u5b9e\u73b0\u81ea\u52a8\u751f\u6210\u5217\uff0c\u65b9\u6cd5\u4e8c\u7406\u8bba\u4e0a\u53ef\u4ee5\uff0c\u4f46\u662f\u76ee\u524d DataGrid \u7684\u5b9e\u73b0\u8fd8\u4e0d\u884c</p> <p>\u60f3\u8981\u81ea\u52a8\u751f\u6210\u5217\uff0c\u76ee\u524d\u53ea\u80fd\u9009\u62e9 Behavior \u6216\u8005 fork Avalonia.Controls.DataGrid \u4fee\u6539</p> <p>Danger</p> <p>\u7531\u4e8e DataGrid \u4e0d\u652f\u6301 IBindingList \u63a5\u53e3\uff0cDataView \u7684\u589e\u5220\u64cd\u4f5c\u65e0\u6cd5\u6b63\u5e38\u5de5\u4f5c\uff0c\u9700\u8981\u989d\u5916\u7684\u5c01\u88c5</p> \u65b9\u6cd5\u4e00\uff1a\u4f7f\u7528 IPropertyAccessorPlugin\u65b9\u6cd5\u4e8c\uff1a\u4f7f\u7528 IReflectableType <p>Avalonia \u63d0\u4f9b\u4e86 <code>IPropertyAccessorPlugin</code> \u63a5\u53e3\uff0c\u8fd9\u4e2a\u63a5\u53e3\u53ef\u4ee5\u5b9e\u73b0\u81ea\u5b9a\u4e49\u7684\u5c5e\u6027\u8bbf\u95ee\u903b\u8f91\uff0c\u5b9e\u73b0\u81ea\u5b9a\u4e49\u7684\u5c5e\u6027\u8bbf\u95ee\u5668\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u6309\u7167\u5217\u540d\u7ed1\u5b9a\u5355\u5143\u683c\u5185\u5bb9\u4e86\u3002</p> <pre><code>public class DataRowViewPropertyAccessorPlugin : IPropertyAccessorPlugin\n{\n    public bool Match(object obj, string propertyName) =&gt; obj is DataRowView row &amp;&amp; row.Row.Table.Columns.Contains(propertyName);\n\n    public IPropertyAccessor? Start(WeakReference&lt;object?&gt; reference, string propertyName)\n    {\n        ArgumentNullException.ThrowIfNull(reference);\n        ArgumentNullException.ThrowIfNull(propertyName);\n\n        if (!reference.TryGetTarget(out var instance) || instance is null)\n            return null;\n\n        return new DataRowViewPropertyAccessor(reference, propertyName);\n    }\n}\n\npublic class DataRowViewPropertyAccessor : PropertyAccessorBase, IWeakEventSubscriber&lt;PropertyChangedEventArgs&gt;\n{\n    private readonly WeakReference&lt;object?&gt; reference;\n    private readonly string propertyName;\n    private bool eventRaised;\n\n    public DataRowViewPropertyAccessor(WeakReference&lt;object?&gt; reference, string propertyName)\n    {\n        this.reference = reference;\n        this.propertyName = propertyName;\n    }\n\n    public override Type? PropertyType =&gt; GetReferenceTarget()?.Row?.Table?.Columns?[propertyName]?.DataType;\n\n    public override object? Value =&gt; GetReferenceTarget()?[propertyName];\n\n    public void OnEvent(object? sender, WeakEvent ev, PropertyChangedEventArgs e)\n    {\n        if (e.PropertyName == propertyName)\n        {\n            eventRaised = true;\n            SendCurrentValue();\n        }\n    }\n\n    public override bool SetValue(object? value, BindingPriority priority)\n    {\n        eventRaised = false;\n\n        var row = GetReferenceTarget();\n        if(row is not null)\n            row[propertyName] = value;\n\n        if (!eventRaised)\n        {\n            SendCurrentValue();\n        }\n        return true;\n    }\n\n    protected override void SubscribeCore()\n    {\n        if (GetReferenceTarget() is INotifyPropertyChanged inpc)\n            WeakEvents.ThreadSafePropertyChanged.Subscribe(inpc, this);\n\n        SendCurrentValue();\n    }\n\n    protected override void UnsubscribeCore()\n    {\n        if (GetReferenceTarget() is INotifyPropertyChanged inpc)\n            WeakEvents.ThreadSafePropertyChanged.Unsubscribe(inpc, this);\n    }\n\n    private DataRowView? GetReferenceTarget()\n    {\n        reference.TryGetTarget(out var target);\n        return target as DataRowView;\n    }\n\n    private void SendCurrentValue()\n    {\n        try\n        {\n            var value = Value;\n            PublishValue(value);\n        }\n        catch\n        {\n            // ignored\n        }\n    }\n}\n</code></pre> <p>\u6253\u5f00 App.axaml.cs \u6587\u4ef6\uff0c\u5728 <code>OnFrameworkInitializationCompleted</code> \u65b9\u6cd5\u4e2d\u6dfb\u52a0\u5982\u4e0b\u4ee3\u7801\u5373\u53ef\u751f\u6548\uff1a</p> <pre><code>BindingPlugins.PropertyAccessors.Add(new DataRowViewPropertyAccessorPlugin());\n</code></pre> <p>\u7ed1\u5b9a\u793a\u4f8b\uff1a</p> <pre><code>&lt;DataGrid AutoGenerateColumns=\"False\" ItemsSource=\"{Binding DataTable.DefaultView}\"&gt;\n    &lt;DataGrid.Columns&gt;\n        &lt;DataGridTextColumn Header=\"id\" Binding=\"{ReflectionBinding name}\"/&gt;\n        &lt;DataGridTextColumn Header=\"name\" Binding=\"{ReflectionBinding name}\"/&gt;\n    &lt;/DataGrid.Columns&gt;\n&lt;/DataGrid&gt;\n</code></pre> <p>Warning</p> <p>\u6b64\u5904\u4e0d\u652f\u6301\u7f16\u8bd1\u7ed1\u5b9a<code>CompiledBinding</code>\u3002</p> <p>\u53c2\u8003\u94fe\u63a5</p> <ul> <li>Avalonia-Tutorials</li> <li>Binding to ExpandoObject (dynamic)</li> </ul> <p>Avalonia \u53ef\u4ee5\u901a\u8fc7 <code>IReflectableType</code> \u63a5\u53e3\u652f\u6301\u52a8\u6001\u7c7b\u578b\uff0c\u53ef\u4ee5\u7b80\u5355\u5c01\u88c5\u4e00\u4e0b<code>DataRowView</code>\uff0c\u5b9e\u73b0 <code>IReflectableType</code> \u63a5\u53e3\u3002</p> <p>Note</p> <p><code>DataRowView</code> \u5b9e\u73b0\u4e86 ICustomTypeDescriptor \u63a5\u53e3\uff0c\u4e5f\u5c31\u662f\u8bf4 <code>DataRowView</code> \u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u52a8\u6001\u7c7b\u578b, \u53ef\u60dc Avalonia \u6682\u65f6\u4e0d\u8ba4\u8fd9\u4e2a\u63a5\u53e3</p> <p>Tip</p> <p>\u8fd9\u91cc\u53ea\u662f\u7b80\u5355\u5c01\u88c5\uff0c\u5b9e\u9645\u4f7f\u7528\u65f6\u4eff\u7167 <code>DataRowView</code> \u521b\u5efa\u4e00\u4e2a\u52a8\u6001\u7c7b\u578b\u53ef\u80fd\u66f4\u597d\u4e00\u4e9b\u3002 \u521b\u5efa\u7c7b\u578b <code>DataRowWrapper</code> \u5b9e\u73b0 <code>IReflectableType</code> \u548c <code>INotifyPropertyChanged</code> \u63a5\u53e3</p> <pre><code>public class DataRowViewWrapper : IReflectableType, INotifyPropertyChanged\n{\n    public event PropertyChangedEventHandler? PropertyChanged;\n\n    public DataRowView Row { get; set; }\n\n    public DataRowViewWrapper(DataRowView row)\n    {\n        this.Row = row;\n        (row as INotifyPropertyChanged).PropertyChanged += (sender, e) =&gt;\n        {\n            PropertyChanged?.Invoke(this, e);\n        };\n    }\n\n    TypeInfo IReflectableType.GetTypeInfo()\n    {\n        return new DynamicTypeInfo(this);\n    }\n\n    private class DynamicTypeInfo : TypeInfo\n    {\n        private DataRowViewWrapper row;\n\n        public DynamicTypeInfo(DataRowViewWrapper reflectableContact)\n        {\n            this.row = reflectableContact;\n        }\n\n        protected override PropertyInfo? GetPropertyImpl(string name, BindingFlags bindingAttr, Binder? binder, Type? returnType, Type[]? types,\n            ParameterModifier[]? modifiers)\n        {\n            if (row.Row.Row.Table.Columns.Contains(name))\n            {\n                return new DynamicPropertyInfo(row.Row.Row.Table.Columns[name]!);\n            }\n            return null;\n        }\n\n        // \u5176\u4ed6\u5c5e\u6027\u65b9\u6cd5\u6682\u65f6\u7528\u4e0d\u5230\uff0c\u4fdd\u6301\u9ed8\u8ba4\u7ee7\u627f\u5373\u53ef\n    }\n\n    private class DynamicPropertyInfo : PropertyInfo\n    {\n        private DataColumn dataColumn;\n\n        public DynamicPropertyInfo(DataColumn dataColumn)\n        {\n            this.dataColumn = dataColumn;\n        }\n\n        public override bool CanRead =&gt; true;\n\n        public override bool CanWrite =&gt; true;\n\n        public override Type PropertyType =&gt; dataColumn.DataType;\n\n        public override string Name =&gt; dataColumn.ColumnName;\n\n        public override object? GetValue(object? obj, BindingFlags invokeAttr, Binder? binder, object?[]? index, CultureInfo? culture)\n        {\n            if (obj is not null &amp;&amp; obj is DataRowViewWrapper row)\n            {\n                return row.Row[Name];\n            }\n            return null;\n        }\n\n        public override void SetValue(object? obj, object? value, BindingFlags invokeAttr, Binder? binder, object?[]? index, CultureInfo? culture)\n        {\n            if (obj is not null &amp;&amp; obj is DataRowViewWrapper row)\n            {\n                row.Row[Name] = value ?? DBNull.Value;\n            }\n        }\n\n        // \u5176\u4ed6\u5c5e\u6027\u65b9\u6cd5\u6682\u65f6\u7528\u4e0d\u5230\uff0c\u4fdd\u6301\u9ed8\u8ba4\u7ee7\u627f\u5373\u53ef\n    }\n}\n</code></pre> <p>\u4f7f\u7528\u793a\u4f8b</p> <pre><code>public class MainViewModel : ViewModelBase\n{\n    public List&lt;DataRowViewWrapper&gt; List { get; set; }\n\n    public DataTable DataTable { get; set; }\n\n    public MainViewModel()\n    {\n\n        this.DataTable = new DataTable();\n        DataTable.Columns.Add(new DataColumn(\"id\", typeof(int)));\n        DataTable.Columns.Add(new DataColumn(\"name\", typeof(string)));\n        for (int i = 0; i &lt; 10; i++)\n        {\n            var row = DataTable.NewRow();\n            row[\"id\"] = i;\n            row[\"name\"] = i.ToString();\n            DataTable.Rows.Add(row);\n        }\n\n        this.List = this.DataTable.DefaultView.OfType&lt;DataRowView&gt;()\n            .Select(p =&gt; new DataRowViewWrapper(p))\n            .ToList();\n    }\n}\n</code></pre> <p>Warning</p> <p>\u8fd9\u91cc\u4f7f\u7528\u4e86\u4e00\u4e2a\u666e\u901a <code>List</code> \u5b58\u50a8 <code>DataRowViewWrapper</code>\uff0c\u6ca1\u6709\u8003\u8651\u589e\u5220\u540c\u6b65\u903b\u8f91\u3002 \u5982\u679c\u9700\u8981\u53ef\u4ee5\u81ea\u884c\u5c01\u88c5\u4e00\u4e2a\u7c7b\u4f3c <code>DataView</code> \u7684\u7c7b\u578b\u3002</p> <p>\u7ed1\u5b9a\u793a\u4f8b</p> <pre><code>&lt;DataGrid AutoGenerateColumns=\"False\" ItemsSource=\"{Binding List}\"&gt;\n    &lt;DataGrid.Columns&gt;\n        &lt;DataGridTextColumn Header=\"id\" Binding=\"{ReflectionBinding name}\"/&gt;\n        &lt;DataGridTextColumn Header=\"name\" Binding=\"{ReflectionBinding name}\"/&gt;\n    &lt;/DataGrid.Columns&gt;\n&lt;/DataGrid&gt;\n</code></pre> <p>\u53c2\u8003\u94fe\u63a5</p> <ul> <li>Feature: ICustomTypeDescriptor support in bindings</li> <li>Bindings uses only \"dynamic\" properties when DataGrid item inherited from IReflectableType</li> </ul> <p>\ud83d\udc96 \u63d0\u4f9b\u8005 kongdetuo</p> <p>\ud83d\udd17 \u539f\u6587\u6863\u94fe\u63a5 \u3010Avalonia\u3011\u5982\u4f55\u7ed1\u5b9a DataTable</p> <p>\uff08\u5df2\u83b7\u5f97\u539f\u4f5c\u8005\u8bb8\u53ef,\u6709\u6539\u52a8\uff09</p>","tags":["Avalonia","Binding"]},{"location":"Avalonia/Binding/Data/hide-error-validation-before-first-input/","title":"\u5728\u9996\u6b21\u8f93\u5165\u524d\u9690\u85cf\u6570\u636e\u9a8c\u8bc1\u9519\u8bef","text":"<p>\u53ef\u4ee5\u7ed9\u6570\u636e\u63d0\u4f9b\u4e00\u4e2a\u4e0d\u53ef\u89c1\u5b57\u7b26\u4f5c\u4e3a\u521d\u59cb\u503c,\u5728\u70b9\u51fb\uff08\u6216\u83b7\u5f97\u7126\u70b9\uff09\u65f6\u5220\u9664\u8fd9\u4e2a\u5b57\u7b26\u3002</p> <p>Tip</p> <p>\u5176\u5b9e\u5927\u591a\u6570\u60c5\u51b5\u7a7a\u683c\u5c31\u8db3\u591f\u4e86</p> <p>Tip</p> <p>\u8bb0\u5f97\u5728\u63d0\u4ea4\u524d\u5bf9\u6240\u6709\u6570\u636e\u9a8c\u8bc1\u8f93\u5165\u6846\u518d\u8fdb\u884c\u4e00\u6b21\u4e0d\u53ef\u89c1\u5b57\u7b26\u5220\u9664</p> <p>\u53ef\u7528\u7684\u4e0d\u53ef\u89c1\u5b57\u7b26\u6709\uff1a</p> \u540d\u79f0 \u4ee3\u7801 \u5b9e\u4f53\u540d \u7b26\u53f7 \u5907\u6ce8 \u96f6\u5bbd\u5ea6\u7a7a\u683c U+200B <code>&amp;ZeroWidthSpace;</code> <code>\u200b</code> \u63a8\u8350\u4f7f\u7528 \u96f6\u5bbd\u5ea6\u975e\u8fde\u63a5\u7b26 U+200C <code>&amp;zwnj;</code> <code>\u200c</code> \u4e0d\u63a8\u8350\u4f7f\u7528\uff0c\u4f1a\u4e0e\u4e0a\u4e00\u4e2a\u5b57\u7b26\u7c98\u8fde \u96f6\u5bbd\u5ea6\u8fde\u63a5\u7b26 U+200D <code>&amp;zwj;</code> <code>\u200d</code> \u4e0d\u5efa\u8bae\u7528\u4e8e\u53ef\u8f93\u5165\u82f1\u6587\u7684\u8f93\u5165\u6846 \u96f6\u5bbd\u5ea6\u8bcd\u8fde\u63a5\u7b26 U+2060 <code>&amp;NoBreak;</code> <code>\u2060</code> \u4e0d\u5efa\u8bae\u7528\u4e8e\u53ef\u8f93\u5165\u82f1\u6587\u7684\u8f93\u5165\u6846 \u96f6\u5bbd\u5ea6\u4e0d\u95f4\u65ad\u7a7a\u683c U+FEFF --- <code>\ufeff</code> \u4e0d\u63a8\u8350\u7528\u4e8e\u4e0d\u95f4\u65ad\u6307\u793a","tags":["Avalonia","Binding","Data","Data Validation"]},{"location":"Avalonia/Binding/Event/why-textbox-keydown-event-not-triggering/","title":"\u4e3a\u4ec0\u4e48 TextBox \u7684 KeyDown \u4e8b\u4ef6\u6ca1\u6709\u89e6\u53d1\uff1f","text":"<p>\u56e0\u4e3a TextBox \u4f1a\u81ea\u884c\u5904\u7406 KeyDown \u4e8b\u4ef6\uff0c\u5982\u679c\u9700\u8981\u5728 TextBox \u4e4b\u524d\u5904\u7406\u4e8b\u4ef6\uff0c\u9700\u8981\u6ce8\u518c\u96a7\u9053\u4e8b\u4ef6\uff1a</p> <pre><code>target.AddHandler(InputElement.KeyDownEvent, OnTextBoxKeyDown, RoutingStrategies.Tunnel);\n\nvoid OnTextBoxKeyDown(object sender, KeyEventArgs e)\n{\n    // \u5904\u7406\u7a0b\u5e8f\u4ee3\u7801\n}\n</code></pre> <p>\ud83d\udc96 \u63d0\u4f9b\u8005 kongdetuo</p> <p>\ud83d\udd17 \u539f\u6587\u6863\u94fe\u63a5 Avalonia \u5e38\u89c1\u95ee\u9898</p> <p>\uff08\u5df2\u83b7\u5f97\u539f\u4f5c\u8005\u8bb8\u53ef,\u6709\u6539\u52a8\uff09</p>","tags":["Avalonia","Event"]},{"location":"Avalonia/Multi%20OS/avalonia-app-linux-double-click-not-open/","title":"\u4e3a\u4ec0\u4e48 Avalonia \u7a0b\u5e8f\u5728 Linux \u73af\u5883\u4e0b\u65e0\u6cd5\u53cc\u51fb\u6253\u5f00","text":"<p>\u56e0\u4e3a .desktop \u88ab\u8bc6\u522b\u6210\u540e\u7f00\u540d\u4e86\uff0c\u5220\u9664\u5c31\u597d</p> <p>\ud83d\udc96 \u63d0\u4f9b\u8005 kongdetuo</p> <p>\ud83d\udd17 \u539f\u6587\u6863\u94fe\u63a5 Avalonia \u5e38\u89c1\u95ee\u9898</p> <p>\uff08\u5df2\u83b7\u5f97\u539f\u4f5c\u8005\u8bb8\u53ef,\u6709\u6539\u52a8\uff09</p>","tags":["Avalonia","Linux"]},{"location":"Avalonia/Style/-pointerover-setting-color-not-working/","title":"\u4e3a\u4ec0\u4e48 <code>:pointerover</code> \u8bbe\u7f6e\u80cc\u666f\u8272\u6ca1\u6709\u751f\u6548","text":"","tags":["Avalonia","Xaml","Style"]},{"location":"Avalonia/Style/-pointerover-setting-color-not-working/#_1","title":"\u5feb\u901f\u4fee\u590d","text":"<p>\u56e0\u4e3a\u4f60\u7684\u6837\u5f0f\u4f18\u5148\u7ea7\u6bd4\u8f83\u4f4e\uff0c\u9700\u8981\u5199\u8be6\u7ec6\u4e00\u4e9b\u624d\u80fd\u8986\u76d6\u4e3b\u9898\u4e2d\u7684\u6837\u5f0f:</p> <pre><code>&lt;Style Selector=\"Button:pointerover /template/ ContentPresenter#PART_ContentPresenter\"&gt;\n    &lt;Setter Property=\"Background\" Value=\"Orange\" /&gt;\n&lt;/Style&gt;\n</code></pre>","tags":["Avalonia","Xaml","Style"]},{"location":"Avalonia/Style/-pointerover-setting-color-not-working/#_2","title":"\u7ec6\u8282","text":"<p>\u8fd9\u662f\u4e3a\u4e86\u4fdd\u8bc1\u80cc\u666f\u8272\u7b49\u5c5e\u6027\u7684\u54cd\u5e94\u6027\u3002 \u5982\u679c\u6a21\u677f\u6309\u4e0b\u9762\u8fd9\u79cd\u5199\u6cd5\uff1a</p> <pre><code>&lt;ControlTemplate&gt;\n    &lt;ContentPresenter x:Name=\"PART_ContentPresenter\"\n                      Background=\"{TemplateBinding Background}\"/&gt;\n&lt;/ControlTemplate&gt;\n</code></pre> <p>\u5f53\u7528\u6237\u76f4\u63a5\u8bbe\u7f6e Background = \"Red\" \u540e\uff0c\u9f20\u6807\u653e\u4e0a\u53bb\u65e0\u6cd5\u53d8\u8272\uff0c\u8fd9\u5c31\u5931\u53bb\u4e86\u54cd\u5e94\u80fd\u529b\u3002\u4e3a\u4e86\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\uff0c\u5f00\u53d1\u7ec4\u5728\u81ea\u5e26\u7684\u6837\u5f0f\u4e2d\u5199\u4e86\u6bd4\u8f83\u9ad8\u4f18\u5148\u7ea7\u7684\u9009\u62e9\u5668\uff0c\u5bfc\u81f4\u4e86\u91cd\u5199\u6837\u5f0f\u9700\u8981\u5199\u8fd9\u4e48\u4e00\u957f\u4e32\u3002</p> <p>\ud83d\udc96 \u63d0\u4f9b\u8005 kongdetuo</p> <p>\ud83d\udd17 \u539f\u6587\u6863\u94fe\u63a5 Avalonia \u5e38\u89c1\u95ee\u9898</p> <p>\uff08\u5df2\u83b7\u5f97\u539f\u4f5c\u8005\u8bb8\u53ef,\u6709\u6539\u52a8\uff09</p>","tags":["Avalonia","Xaml","Style"]},{"location":"Avalonia/Style/datagrid-not-displaying/","title":"\u4e3a\u4ec0\u4e48 <code>DataGrid</code> \u6ca1\u6709\u663e\u793a","text":"<p>\u8bf7\u68c0\u67e5\u662f\u5426\u5728App.axaml\u4e2d\u5f15\u5165\u4e86\u6837\u5f0f</p> <pre><code>&lt;Application.Styles&gt;\n    &lt;StyleInclude Source=\"avares://Avalonia.Controls.DataGrid/Themes/Fluent.xaml\"/&gt;\n&lt;/Application.Styles&gt;\n</code></pre> <p>\ud83d\udc96 \u63d0\u4f9b\u8005 kongdetuo</p> <p>\ud83d\udd17 \u539f\u6587\u6863\u94fe\u63a5 Avalonia \u5e38\u89c1\u95ee\u9898</p> <p>\uff08\u5df2\u83b7\u5f97\u539f\u4f5c\u8005\u8bb8\u53ef,\u6709\u6539\u52a8\uff09</p>","tags":["Avalonia","Xaml","Style"]},{"location":"Avalonia/Style/is-there-a-trigger-in-avalonia/","title":"Avalonia \u4e2d\u6709 <code>Trigger</code> \u5417\uff1f","text":"<p>\u6ca1\u6709\u3002\u4e0b\u9762\u6709\u4e00\u4e9b\u66ff\u4ee3\u54c1\uff1a</p> <ul> <li>\u9009\u62e9\u5668\u8bed\u6cd5</li> <li>\u6837\u5f0f\u7c7b\u7ed1\u5b9a</li> <li>\u57fa\u4e8eBehavior\u7684DataTrigger</li> </ul> <p>\ud83d\udc96 \u63d0\u4f9b\u8005 kongdetuo</p> <p>\ud83d\udd17 \u539f\u6587\u6863\u94fe\u63a5 Avalonia \u5e38\u89c1\u95ee\u9898</p> <p>\uff08\u5df2\u83b7\u5f97\u539f\u4f5c\u8005\u8bb8\u53ef,\u6709\u6539\u52a8\uff09</p>","tags":["Avalonia","Xaml","Style"]},{"location":"en/","title":"Avalonia Troubleshooting Guidebook","text":"<p>Since Avalonia's documentation is not comprehensive and there are many difficulties in multi-os development, this guide was created to document various errors and their solutions, and answer questions for beginners.</p> <p>If you find this guide helpful or think it will help you, please consider starring this project.</p> <p>Note</p> <p>The scope of this guide covers all errors encountered when writing Avalonia programs, regardless of whether the errors themselves are related to Avalonia.</p>"},{"location":"en/Avalonia/can-avalonia-embed-html/","title":"Can Avalonia embed HTML?","text":"<p>You can consider the following projects:</p> <ul> <li>Webviews.Avalonia</li> <li>WebView</li> <li>CefGlue</li> <li>[Official] [Paid] Avalonia Accelerate</li> <li>[Paid] DotNetBrowser</li> <li>[Simple Rendering] Avalonia.HtmlRenderer</li> </ul> <p>\ud83d\udc96 Provided by kongdetuo</p> <p>\ud83d\udd17 Original Document Avalonia \u5e38\u89c1\u95ee\u9898</p> <p>\uff08Obtained permission from original author\uff0cModified\uff09</p>","tags":["Avalonia","Web"]},{"location":"en/Avalonia/Binding/how-to-bind-datatable/","title":"How to Bind DataTable","text":"","tags":["Avalonia","Binding"]},{"location":"en/Avalonia/Binding/how-to-bind-datatable/#background","title":"Background","text":"<p>Avalonia supports common collection types, but DataTable itself is not a collection and cannot be bound directly. DataTable.Rows and DataTable.DefaultView are collections and can be used as data sources, but DataRow and DataRowView are not standard data types, so the binding engine cannot recognize them correctly. This article records two methods to solve this problem.</p> <p>Info</p> <p>Both methods can display data normally. Currently, these two methods do basically the same thing. Method 1 is simpler, while Method 2 may have better support in the future. Please choose as needed.</p> <p>Both methods use DataRowView because it implements the INotifyPropertyChanged interface, making binding easier.</p> <p>Tip</p> <p>If you need grouping, you need to inherit DataGridGroupDescription and write your own grouping logic. The built-in DataGridPathGroupDescription is not very useful.</p> <p>Tip</p> <p>Due to the binding implementation of DataGrid, it is always read-only now. If you need to edit, please use template columns or fork Avalonia.Controls.DataGrid for modification.</p> <p>Warning</p> <p>Method 1 cannot auto-generate columns. Method 2 theoretically can, but the current DataGrid implementation does not support it yet.</p> <p>If you want to auto-generate columns, you can currently only choose Behavior or fork Avalonia.Controls.DataGrid for modification.</p> <p>Danger</p> <p>Since DataGrid does not support the IBindingList interface, add/delete operations on DataView do not work properly and require additional encapsulation.</p> Method 1: Using IPropertyAccessorPluginMethod 2: Using IReflectableType <p>Avalonia provides the <code>IPropertyAccessorPlugin</code> interface, which allows you to implement custom property access logic. After implementing a custom property accessor, you can bind cell content by column name.</p> <pre><code>public class DataRowViewPropertyAccessorPlugin : IPropertyAccessorPlugin\n{\n    public bool Match(object obj, string propertyName) =&gt; obj is DataRowView row &amp;&amp; row.Row.Table.Columns.Contains(propertyName);\n\n    public IPropertyAccessor? Start(WeakReference&lt;object?&gt; reference, string propertyName)\n    {\n        ArgumentNullException.ThrowIfNull(reference);\n        ArgumentNullException.ThrowIfNull(propertyName);\n\n        if (!reference.TryGetTarget(out var instance) || instance is null)\n            return null;\n\n        return new DataRowViewPropertyAccessor(reference, propertyName);\n    }\n}\n\npublic class DataRowViewPropertyAccessor : PropertyAccessorBase, IWeakEventSubscriber&lt;PropertyChangedEventArgs&gt;\n{\n    private readonly WeakReference&lt;object?&gt; reference;\n    private readonly string propertyName;\n    private bool eventRaised;\n\n    public DataRowViewPropertyAccessor(WeakReference&lt;object?&gt; reference, string propertyName)\n    {\n        this.reference = reference;\n        this.propertyName = propertyName;\n    }\n\n    public override Type? PropertyType =&gt; GetReferenceTarget()?.Row?.Table?.Columns?[propertyName]?.DataType;\n\n    public override object? Value =&gt; GetReferenceTarget()?[propertyName];\n\n    public void OnEvent(object? sender, WeakEvent ev, PropertyChangedEventArgs e)\n    {\n        if (e.PropertyName == propertyName)\n        {\n            eventRaised = true;\n            SendCurrentValue();\n        }\n    }\n\n    public override bool SetValue(object? value, BindingPriority priority)\n    {\n        eventRaised = false;\n\n        var row = GetReferenceTarget();\n        if(row is not null)\n            row[propertyName] = value;\n\n        if (!eventRaised)\n        {\n            SendCurrentValue();\n        }\n        return true;\n    }\n\n    protected override void SubscribeCore()\n    {\n        if (GetReferenceTarget() is INotifyPropertyChanged inpc)\n            WeakEvents.ThreadSafePropertyChanged.Subscribe(inpc, this);\n\n        SendCurrentValue();\n    }\n\n    protected override void UnsubscribeCore()\n    {\n        if (GetReferenceTarget() is INotifyPropertyChanged inpc)\n            WeakEvents.ThreadSafePropertyChanged.Unsubscribe(inpc, this);\n    }\n\n    private DataRowView? GetReferenceTarget()\n    {\n        reference.TryGetTarget(out var target);\n        return target as DataRowView;\n    }\n\n    private void SendCurrentValue()\n    {\n        try\n        {\n            var value = Value;\n            PublishValue(value);\n        }\n        catch\n        {\n            // ignored\n        }\n    }\n}\n</code></pre> <p>Open the App.axaml.cs file and add the following code in the <code>OnFrameworkInitializationCompleted</code> method to take effect:</p> <pre><code>BindingPlugins.PropertyAccessors.Add(new DataRowViewPropertyAccessorPlugin());\n</code></pre> <p>Binding example</p> <pre><code>&lt;DataGrid AutoGenerateColumns=\"False\" ItemsSource=\"{Binding DataTable.DefaultView}\"&gt;\n    &lt;DataGrid.Columns&gt;\n        &lt;DataGridTextColumn Header=\"id\" Binding=\"{ReflectionBinding name}\"/&gt;\n        &lt;DataGridTextColumn Header=\"name\" Binding=\"{ReflectionBinding name}\"/&gt;\n    &lt;/DataGrid.Columns&gt;\n&lt;/DataGrid&gt;\n</code></pre> <p>Warning</p> <p>CompiledBinding is not supported here.</p> <p>References</p> <ul> <li>Avalonia-Tutorials</li> <li>Binding to ExpandoObject (dynamic)</li> </ul> <p>Avalonia can support dynamic types through the <code>IReflectableType</code> interface. You can simply wrap <code>DataRowView</code> and implement the <code>IReflectableType</code> interface.</p> <p>Note</p> <p><code>DataRowView</code> implements the ICustomTypeDescriptor interface, which means <code>DataRowView</code> itself is a dynamic type, but unfortunately Avalonia does not recognize this interface yet.</p> <p>Tip</p> <p>This is just a simple wrapper. In actual use, it may be better to create a dynamic type similar to <code>DataRowView</code>. Create a type <code>DataRowWrapper</code> that implements the <code>IReflectableType</code> and <code>INotifyPropertyChanged</code> interfaces.</p> <pre><code>public class DataRowViewWrapper : IReflectableType, INotifyPropertyChanged\n{\n    public event PropertyChangedEventHandler? PropertyChanged;\n\n    public DataRowView Row { get; set; }\n\n    public DataRowViewWrapper(DataRowView row)\n    {\n        this.Row = row;\n        (row as INotifyPropertyChanged).PropertyChanged += (sender, e) =&gt;\n        {\n            PropertyChanged?.Invoke(this, e);\n        };\n    }\n\n    TypeInfo IReflectableType.GetTypeInfo()\n    {\n        return new DynamicTypeInfo(this);\n    }\n\n    private class DynamicTypeInfo : TypeInfo\n    {\n        private DataRowViewWrapper row;\n\n        public DynamicTypeInfo(DataRowViewWrapper reflectableContact)\n        {\n            this.row = reflectableContact;\n        }\n\n        protected override PropertyInfo? GetPropertyImpl(string name, BindingFlags bindingAttr, Binder? binder, Type? returnType, Type[]? types,\n            ParameterModifier[]? modifiers)\n        {\n            if (row.Row.Row.Table.Columns.Contains(name))\n            {\n                return new DynamicPropertyInfo(row.Row.Row.Table.Columns[name]!);\n            }\n            return null;\n        }\n    }\n\n    private class DynamicPropertyInfo : PropertyInfo\n    {\n        private DataColumn dataColumn;\n\n        public DynamicPropertyInfo(DataColumn dataColumn)\n        {\n            this.dataColumn = dataColumn;\n        }\n\n        public override bool CanRead =&gt; true;\n\n        public override bool CanWrite =&gt; true;\n\n        public override Type PropertyType =&gt; dataColumn.DataType;\n\n        public override string Name =&gt; dataColumn.ColumnName;\n\n        public override object? GetValue(object? obj, BindingFlags invokeAttr, Binder? binder, object?[]? index, CultureInfo? culture)\n        {\n            if (obj is not null &amp;&amp; obj is DataRowViewWrapper row)\n            {\n                return row.Row[Name];\n            }\n            return null;\n        }\n\n        public override void SetValue(object? obj, object? value, BindingFlags invokeAttr, Binder? binder, object?[]? index, CultureInfo? culture)\n        {\n            if (obj is not null &amp;&amp; obj is DataRowViewWrapper row)\n            {\n                row.Row[Name] = value ?? DBNull.Value;\n            }\n        }\n    }\n}\n</code></pre> <p>Usage Example</p> <pre><code>public class MainViewModel : ViewModelBase\n{\n    public List&lt;DataRowViewWrapper&gt; List { get; set; }\n\n    public DataTable DataTable { get; set; }\n\n    public MainViewModel()\n    {\n\n        this.DataTable = new DataTable();\n        DataTable.Columns.Add(new DataColumn(\"id\", typeof(int)));\n        DataTable.Columns.Add(new DataColumn(\"name\", typeof(string)));\n        for (int i = 0; i &lt; 10; i++)\n        {\n            var row = DataTable.NewRow();\n            row[\"id\"] = i;\n            row[\"name\"] = i.ToString();\n            DataTable.Rows.Add(row);\n        }\n\n        this.List = this.DataTable.DefaultView.OfType&lt;DataRowView&gt;()\n            .Select(p =&gt; new DataRowViewWrapper(p))\n            .ToList();\n    }\n}\n</code></pre> <p>Warning</p> <p>Here, a regular <code>List</code> is used to store <code>DataRowViewWrapper</code>, and the add/delete synchronization logic is not considered. If needed, you can encapsulate a type similar to <code>DataView</code> yourself.</p> <p>Binding Example</p> <pre><code>&lt;DataGrid AutoGenerateColumns=\"False\" ItemsSource=\"{Binding List}\"&gt;\n    &lt;DataGrid.Columns&gt;\n        &lt;DataGridTextColumn Header=\"id\" Binding=\"{ReflectionBinding name}\"/&gt;\n        &lt;DataGridTextColumn Header=\"name\" Binding=\"{ReflectionBinding name}\"/&gt;\n    &lt;/DataGrid.Columns&gt;\n&lt;/DataGrid&gt;\n</code></pre> <p>References</p> <ul> <li>Feature: ICustomTypeDescriptor support in bindings</li> <li>Bindings uses only \"dynamic\" properties when DataGrid item inherited from IReflectableType</li> </ul> <p>\ud83d\udc96 Provided by kongdetuo</p> <p>\ud83d\udd17 Original document \u3010Avalonia\u3011\u5982\u4f55\u7ed1\u5b9a DataTable</p> <p>\uff08Obtained permission from original author\uff0cModified\uff09</p>","tags":["Avalonia","Binding"]},{"location":"en/Avalonia/Binding/Data/hide-error-validation-before-first-input/","title":"Hide Data Validation Errors Before First Input","text":"<p>You can provide an invisible character as the initial value for the data, and remove this character when the input is clicked (or focused).</p> <p>Tip</p> <p>In most cases, a space is sufficient.</p> <p>Tip</p> <p>Remember to remove all invisible characters from the input fields before submission.</p> <p>Available invisible characters:</p> Name Code Entity Name Symbol Notes Zero Width Space U+200B <code>&amp;ZeroWidthSpace;</code> <code>\u200b</code> Recommended Zero Width Non-joiner U+200C <code>&amp;zwnj;</code> <code>\u200c</code> Not recommended, sticks to the previous character Zero Width Joiner U+200D <code>&amp;zwj;</code> <code>\u200d</code> Not recommended for inputs allowing English characters Word Joiner U+2060 <code>&amp;NoBreak;</code> <code>\u2060</code> Not recommended for inputs allowing English characters Zero Width Non-breaking Space U+FEFF --- <code>\ufeff</code> Not recommended as non-breaking indicators","tags":["Avalonia","Binding","Data","Data Validation"]},{"location":"en/Avalonia/Binding/Event/why-textbox-keydown-event-not-triggering/","title":"Why is the KeyDown event of TextBox not triggered?","text":"<p>Because TextBox handles the KeyDown event internally. If you need to handle the event before TextBox processes it, you should register a tunnel event:</p> <pre><code>target.AddHandler(InputElement.KeyDownEvent, OnTextBoxKeyDown, RoutingStrategies.Tunnel);\n\nvoid OnTextBoxKeyDown(object sender, KeyEventArgs e)\n{\n    // Write your codes here\n}\n</code></pre> <p>\ud83d\udc96 Provided by kongdetuo</p> <p>\ud83d\udd17 Original Document Avalonia \u5e38\u89c1\u95ee\u9898</p> <p>\uff08Obtained permission from original author\uff0cModified\uff09</p>","tags":["Avalonia","Event"]},{"location":"en/Avalonia/Multi%20OS/avalonia-app-linux-double-click-not-open/","title":"Why can't the Avalonia app be opened by double-clicking in Linux?","text":"<p>Because the <code>.desktop</code> is being recognized as a file extension. Just remove it.</p> <p>\ud83d\udc96 Provided by kongdetuo</p> <p>\ud83d\udd17 Original Document Avalonia \u5e38\u89c1\u95ee\u9898</p> <p>\uff08Obtained permission from original author\uff0cModified\uff09</p>","tags":["Avalonia","Linux"]},{"location":"en/Avalonia/Style/-pointerover-setting-color-not-working/","title":"Why did setting the color with <code>:pointerover</code> have no effect?","text":"","tags":["Avalonia","Xaml","Style"]},{"location":"en/Avalonia/Style/-pointerover-setting-color-not-working/#tldr","title":"TL;DR","text":"<p>Because your style has a lower priority. You need to write a more specific selector to override the styles in the theme:</p> <pre><code>&lt;Style Selector=\"Button:pointerover /template/ ContentPresenter#PART_ContentPresenter\"&gt;\n    &lt;Setter Property=\"Background\" Value=\"Orange\" /&gt;\n&lt;/Style&gt;\n</code></pre>","tags":["Avalonia","Xaml","Style"]},{"location":"en/Avalonia/Style/-pointerover-setting-color-not-working/#details","title":"Details","text":"<p>This is to ensure properties like background color are responsive. If the template is written like this:</p> <pre><code>&lt;ControlTemplate&gt;\n    &lt;ContentPresenter x:Name=\"PART_ContentPresenter\"\n                      Background=\"{TemplateBinding Background}\"/&gt;\n&lt;/ControlTemplate&gt;\n</code></pre> <p>When the user sets <code>Background = \"Red\"</code> directly, hovering the mouse will not change the color, which loses responsiveness. To avoid this, the development team wrote higher-priority selectors in the styles, so you need to write such a long selector to override them.</p> <p>\ud83d\udc96 Provided by kongdetuo</p> <p>\ud83d\udd17 Original Document Avalonia \u5e38\u89c1\u95ee\u9898</p> <p>\uff08Obtained permission from original author\uff0cModified\uff09</p>","tags":["Avalonia","Xaml","Style"]},{"location":"en/Avalonia/Style/datagrid-not-displaying/","title":"Why did the <code>DataGrid</code> not display","text":"<p>Please check whether you have included the style in App.axaml:</p> <pre><code>&lt;Application.Styles&gt;\n    &lt;StyleInclude Source=\"avares://Avalonia.Controls.DataGrid/Themes/Fluent.xaml\"/&gt;\n&lt;/Application.Styles&gt;\n</code></pre> <p>\ud83d\udc96 Provided by kongdetuo</p> <p>\ud83d\udd17 Original Document Avalonia \u5e38\u89c1\u95ee\u9898</p> <p>\uff08Obtained permission from original author\uff0cModified\uff09</p>","tags":["Avalonia","Xaml","Style"]},{"location":"en/Avalonia/Style/is-there-a-trigger-in-avalonia/","title":"Is there a <code>Trigger</code> in Avalonia\uff1f","text":"<p>No. Here are some alternatives\uff1a</p> <ul> <li>Style Selector Syntax</li> <li>How To Bind Style Classes</li> <li>DataTrigger Based On Behavior</li> </ul> <p>\ud83d\udc96 Provided by kongdetuo</p> <p>\ud83d\udd17 Original Document Avalonia \u5e38\u89c1\u95ee\u9898</p> <p>\uff08Obtained permission from original author\uff0cModified\uff09</p>","tags":["Avalonia","Xaml","Style"]},{"location":"","title":"Avalonia \u6545\u969c\u6392\u9664\u6307\u5357","text":"<p>\u7531\u4e8eAvalonia\u7684\u6587\u6863\u4e0d\u5168\u9762\uff0c\u591a\u7cfb\u7edf\u5f00\u53d1\u9047\u5230\u7684\u5751\u4e5f\u8f83\u591a\uff0c\u6545\u521b\u5efa\u6b64\u6307\u5357\u4ee5\u8bb0\u5f55\u5404\u79cd\u9519\u8bef\u53ca\u5176\u89e3\u51b3\u65b9\u6848\uff0c\u56de\u7b54\u65b0\u624b\u7591\u95ee\u3002</p> <p>\u5982\u679c\u60a8\u89c9\u5f97\u672c\u6307\u5357\u5e2e\u5230\u4e86\u6216\u5c06\u4f1a\u5e2e\u52a9\u5230\u60a8\uff0c\u8fd8\u8bf7Star\u672c\u9879\u76ee\u3002</p> <p>Note</p> <p>\u672c\u6307\u5357\u7684\u8986\u76d6\u8303\u56f4\u5305\u62ec\u6240\u6709\u7f16\u5199Avalonia\u7a0b\u5e8f\u4f1a\u9047\u5230\u7684\u9519\u8bef\uff0c\u65e0\u8bba\u9519\u8bef\u672c\u8eab\u4e0eAvalonia\u662f\u5426\u76f8\u5173\u3002</p>"},{"location":"Avalonia/can-avalonia-embed-html/","title":"Avalonia \u53ef\u4ee5\u5185\u5d4c Html \u5417\uff1f","text":"<p>\u53ef\u4ee5\u8003\u8651\u4ee5\u4e0b\u9879\u76ee\uff1a</p> <ul> <li>Webviews.Avalonia</li> <li>WebView</li> <li>CefGlue</li> <li>\u3010\u5b98\u65b9\u3011\u3010\u4ed8\u8d39\u3011Avalonia Accelerate</li> <li>\u3010\u4ed8\u8d39\u3011DotNetBrowser</li> <li>\u3010\u7b80\u5355\u6e32\u67d3\u3011Avalonia.HtmlRenderer</li> </ul> <p>\ud83d\udc96 \u63d0\u4f9b\u8005 kongdetuo</p> <p>\ud83d\udd17 \u539f\u6587\u6863\u94fe\u63a5 Avalonia \u5e38\u89c1\u95ee\u9898</p> <p>\uff08\u5df2\u83b7\u5f97\u539f\u4f5c\u8005\u8bb8\u53ef,\u6709\u6539\u52a8\uff09</p>","tags":["Avalonia","Web"]},{"location":"Avalonia/Binding/how-to-bind-datatable/","title":"\u5982\u4f55\u7ed1\u5b9a DataTable","text":"","tags":["Avalonia","Binding"]},{"location":"Avalonia/Binding/how-to-bind-datatable/#_1","title":"\u80cc\u666f","text":"<p>Avalonia \u652f\u6301\u5e38\u89c1\u7684\u96c6\u5408\u7c7b\u578b\uff0c\u4f46\u662f DataTable \u5e76\u975e\u96c6\u5408\u65e0\u6cd5\u76f4\u63a5\u7ed1\u5b9a\u3002DataTable.Rows \u548c DataTable.DefaultView \u662f\u96c6\u5408\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u6570\u636e\u6e90\u4f7f\u7528\uff0c\u4f46\u662f DataRow \u548c DataRowView \u4e0d\u662f\u6807\u51c6\u6570\u636e\u7c7b\u578b\uff0c\u7ed1\u5b9a\u5f15\u64ce\u65e0\u6cd5\u6b63\u786e\u8bc6\u522b\uff0c\u672c\u6587\u8bb0\u5f55\u4e24\u79cd\u65b9\u6cd5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002</p> <p>Info</p> <p>\u4e24\u79cd\u65b9\u6cd5\u90fd\u53ef\u4ee5\u6b63\u5e38\u5c55\u793a\u6570\u636e\uff0c\u76ee\u524d\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u505a\u7684\u4e8b\u60c5\u57fa\u672c\u4e00\u81f4\uff0c\u65b9\u6cd5\u4e00\u6bd4\u8f83\u7b80\u5355\uff0c\u65b9\u6cd5\u4e8c\u5728\u672a\u6765\u53ef\u80fd\u6709\u66f4\u597d\u7684\u652f\u6301\uff0c\u8bf7\u6309\u9700\u9009\u62e9\u3002</p> <p>\u4e24\u79cd\u65b9\u6cd5\u90fd\u4f7f\u7528 DataRowView\uff0c\u56e0\u4e3a\u5b83\u5b9e\u73b0\u4e86 INotifyPropertyChanged \u63a5\u53e3, \u7ed1\u5b9a\u8d77\u6765\u65b9\u4fbf\u4e00\u4e9b\u3002</p> <p>Tip</p> <p>\u5982\u9700\u5206\u7ec4\uff0c\u9700\u8981\u7ee7\u627f DataGridGroupDescription \u7f16\u5199\u5206\u7ec4\u903b\u8f91\uff0c\u5185\u7f6e\u7684 DataGridPathGroupDescription \u4e0d\u592a\u884c\u3002</p> <p>Tip</p> <p>\u7531\u4e8e DataGrid \u7684\u7ed1\u5b9a\u5b9e\u73b0\uff0c\u73b0\u5728\u603b\u662f\u53ea\u8bfb\u7684\uff0c\u5982\u679c\u9700\u8981\u7f16\u8f91\uff0c\u8bf7\u4f7f\u7528\u6a21\u677f\u5217 \u6216\u8005 fork Avalonia.Controls.DataGrid \u4fee\u6539\u3002</p> <p>Warning</p> <p>\u65b9\u6cd5\u4e00\u65e0\u6cd5\u5b9e\u73b0\u81ea\u52a8\u751f\u6210\u5217\uff0c\u65b9\u6cd5\u4e8c\u7406\u8bba\u4e0a\u53ef\u4ee5\uff0c\u4f46\u662f\u76ee\u524d DataGrid \u7684\u5b9e\u73b0\u8fd8\u4e0d\u884c</p> <p>\u60f3\u8981\u81ea\u52a8\u751f\u6210\u5217\uff0c\u76ee\u524d\u53ea\u80fd\u9009\u62e9 Behavior \u6216\u8005 fork Avalonia.Controls.DataGrid \u4fee\u6539</p> <p>Danger</p> <p>\u7531\u4e8e DataGrid \u4e0d\u652f\u6301 IBindingList \u63a5\u53e3\uff0cDataView \u7684\u589e\u5220\u64cd\u4f5c\u65e0\u6cd5\u6b63\u5e38\u5de5\u4f5c\uff0c\u9700\u8981\u989d\u5916\u7684\u5c01\u88c5</p> \u65b9\u6cd5\u4e00\uff1a\u4f7f\u7528 IPropertyAccessorPlugin\u65b9\u6cd5\u4e8c\uff1a\u4f7f\u7528 IReflectableType <p>Avalonia \u63d0\u4f9b\u4e86 <code>IPropertyAccessorPlugin</code> \u63a5\u53e3\uff0c\u8fd9\u4e2a\u63a5\u53e3\u53ef\u4ee5\u5b9e\u73b0\u81ea\u5b9a\u4e49\u7684\u5c5e\u6027\u8bbf\u95ee\u903b\u8f91\uff0c\u5b9e\u73b0\u81ea\u5b9a\u4e49\u7684\u5c5e\u6027\u8bbf\u95ee\u5668\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u6309\u7167\u5217\u540d\u7ed1\u5b9a\u5355\u5143\u683c\u5185\u5bb9\u4e86\u3002</p> <pre><code>public class DataRowViewPropertyAccessorPlugin : IPropertyAccessorPlugin\n{\n    public bool Match(object obj, string propertyName) =&gt; obj is DataRowView row &amp;&amp; row.Row.Table.Columns.Contains(propertyName);\n\n    public IPropertyAccessor? Start(WeakReference&lt;object?&gt; reference, string propertyName)\n    {\n        ArgumentNullException.ThrowIfNull(reference);\n        ArgumentNullException.ThrowIfNull(propertyName);\n\n        if (!reference.TryGetTarget(out var instance) || instance is null)\n            return null;\n\n        return new DataRowViewPropertyAccessor(reference, propertyName);\n    }\n}\n\npublic class DataRowViewPropertyAccessor : PropertyAccessorBase, IWeakEventSubscriber&lt;PropertyChangedEventArgs&gt;\n{\n    private readonly WeakReference&lt;object?&gt; reference;\n    private readonly string propertyName;\n    private bool eventRaised;\n\n    public DataRowViewPropertyAccessor(WeakReference&lt;object?&gt; reference, string propertyName)\n    {\n        this.reference = reference;\n        this.propertyName = propertyName;\n    }\n\n    public override Type? PropertyType =&gt; GetReferenceTarget()?.Row?.Table?.Columns?[propertyName]?.DataType;\n\n    public override object? Value =&gt; GetReferenceTarget()?[propertyName];\n\n    public void OnEvent(object? sender, WeakEvent ev, PropertyChangedEventArgs e)\n    {\n        if (e.PropertyName == propertyName)\n        {\n            eventRaised = true;\n            SendCurrentValue();\n        }\n    }\n\n    public override bool SetValue(object? value, BindingPriority priority)\n    {\n        eventRaised = false;\n\n        var row = GetReferenceTarget();\n        if(row is not null)\n            row[propertyName] = value;\n\n        if (!eventRaised)\n        {\n            SendCurrentValue();\n        }\n        return true;\n    }\n\n    protected override void SubscribeCore()\n    {\n        if (GetReferenceTarget() is INotifyPropertyChanged inpc)\n            WeakEvents.ThreadSafePropertyChanged.Subscribe(inpc, this);\n\n        SendCurrentValue();\n    }\n\n    protected override void UnsubscribeCore()\n    {\n        if (GetReferenceTarget() is INotifyPropertyChanged inpc)\n            WeakEvents.ThreadSafePropertyChanged.Unsubscribe(inpc, this);\n    }\n\n    private DataRowView? GetReferenceTarget()\n    {\n        reference.TryGetTarget(out var target);\n        return target as DataRowView;\n    }\n\n    private void SendCurrentValue()\n    {\n        try\n        {\n            var value = Value;\n            PublishValue(value);\n        }\n        catch\n        {\n            // ignored\n        }\n    }\n}\n</code></pre> <p>\u6253\u5f00 App.axaml.cs \u6587\u4ef6\uff0c\u5728 <code>OnFrameworkInitializationCompleted</code> \u65b9\u6cd5\u4e2d\u6dfb\u52a0\u5982\u4e0b\u4ee3\u7801\u5373\u53ef\u751f\u6548\uff1a</p> <pre><code>BindingPlugins.PropertyAccessors.Add(new DataRowViewPropertyAccessorPlugin());\n</code></pre> <p>\u7ed1\u5b9a\u793a\u4f8b\uff1a</p> <pre><code>&lt;DataGrid AutoGenerateColumns=\"False\" ItemsSource=\"{Binding DataTable.DefaultView}\"&gt;\n    &lt;DataGrid.Columns&gt;\n        &lt;DataGridTextColumn Header=\"id\" Binding=\"{ReflectionBinding name}\"/&gt;\n        &lt;DataGridTextColumn Header=\"name\" Binding=\"{ReflectionBinding name}\"/&gt;\n    &lt;/DataGrid.Columns&gt;\n&lt;/DataGrid&gt;\n</code></pre> <p>Warning</p> <p>\u6b64\u5904\u4e0d\u652f\u6301\u7f16\u8bd1\u7ed1\u5b9a<code>CompiledBinding</code>\u3002</p> <p>\u53c2\u8003\u94fe\u63a5</p> <ul> <li>Avalonia-Tutorials</li> <li>Binding to ExpandoObject (dynamic)</li> </ul> <p>Avalonia \u53ef\u4ee5\u901a\u8fc7 <code>IReflectableType</code> \u63a5\u53e3\u652f\u6301\u52a8\u6001\u7c7b\u578b\uff0c\u53ef\u4ee5\u7b80\u5355\u5c01\u88c5\u4e00\u4e0b<code>DataRowView</code>\uff0c\u5b9e\u73b0 <code>IReflectableType</code> \u63a5\u53e3\u3002</p> <p>Note</p> <p><code>DataRowView</code> \u5b9e\u73b0\u4e86 ICustomTypeDescriptor \u63a5\u53e3\uff0c\u4e5f\u5c31\u662f\u8bf4 <code>DataRowView</code> \u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u52a8\u6001\u7c7b\u578b, \u53ef\u60dc Avalonia \u6682\u65f6\u4e0d\u8ba4\u8fd9\u4e2a\u63a5\u53e3</p> <p>Tip</p> <p>\u8fd9\u91cc\u53ea\u662f\u7b80\u5355\u5c01\u88c5\uff0c\u5b9e\u9645\u4f7f\u7528\u65f6\u4eff\u7167 <code>DataRowView</code> \u521b\u5efa\u4e00\u4e2a\u52a8\u6001\u7c7b\u578b\u53ef\u80fd\u66f4\u597d\u4e00\u4e9b\u3002 \u521b\u5efa\u7c7b\u578b <code>DataRowWrapper</code> \u5b9e\u73b0 <code>IReflectableType</code> \u548c <code>INotifyPropertyChanged</code> \u63a5\u53e3</p> <pre><code>public class DataRowViewWrapper : IReflectableType, INotifyPropertyChanged\n{\n    public event PropertyChangedEventHandler? PropertyChanged;\n\n    public DataRowView Row { get; set; }\n\n    public DataRowViewWrapper(DataRowView row)\n    {\n        this.Row = row;\n        (row as INotifyPropertyChanged).PropertyChanged += (sender, e) =&gt;\n        {\n            PropertyChanged?.Invoke(this, e);\n        };\n    }\n\n    TypeInfo IReflectableType.GetTypeInfo()\n    {\n        return new DynamicTypeInfo(this);\n    }\n\n    private class DynamicTypeInfo : TypeInfo\n    {\n        private DataRowViewWrapper row;\n\n        public DynamicTypeInfo(DataRowViewWrapper reflectableContact)\n        {\n            this.row = reflectableContact;\n        }\n\n        protected override PropertyInfo? GetPropertyImpl(string name, BindingFlags bindingAttr, Binder? binder, Type? returnType, Type[]? types,\n            ParameterModifier[]? modifiers)\n        {\n            if (row.Row.Row.Table.Columns.Contains(name))\n            {\n                return new DynamicPropertyInfo(row.Row.Row.Table.Columns[name]!);\n            }\n            return null;\n        }\n\n        // \u5176\u4ed6\u5c5e\u6027\u65b9\u6cd5\u6682\u65f6\u7528\u4e0d\u5230\uff0c\u4fdd\u6301\u9ed8\u8ba4\u7ee7\u627f\u5373\u53ef\n    }\n\n    private class DynamicPropertyInfo : PropertyInfo\n    {\n        private DataColumn dataColumn;\n\n        public DynamicPropertyInfo(DataColumn dataColumn)\n        {\n            this.dataColumn = dataColumn;\n        }\n\n        public override bool CanRead =&gt; true;\n\n        public override bool CanWrite =&gt; true;\n\n        public override Type PropertyType =&gt; dataColumn.DataType;\n\n        public override string Name =&gt; dataColumn.ColumnName;\n\n        public override object? GetValue(object? obj, BindingFlags invokeAttr, Binder? binder, object?[]? index, CultureInfo? culture)\n        {\n            if (obj is not null &amp;&amp; obj is DataRowViewWrapper row)\n            {\n                return row.Row[Name];\n            }\n            return null;\n        }\n\n        public override void SetValue(object? obj, object? value, BindingFlags invokeAttr, Binder? binder, object?[]? index, CultureInfo? culture)\n        {\n            if (obj is not null &amp;&amp; obj is DataRowViewWrapper row)\n            {\n                row.Row[Name] = value ?? DBNull.Value;\n            }\n        }\n\n        // \u5176\u4ed6\u5c5e\u6027\u65b9\u6cd5\u6682\u65f6\u7528\u4e0d\u5230\uff0c\u4fdd\u6301\u9ed8\u8ba4\u7ee7\u627f\u5373\u53ef\n    }\n}\n</code></pre> <p>\u4f7f\u7528\u793a\u4f8b</p> <pre><code>public class MainViewModel : ViewModelBase\n{\n    public List&lt;DataRowViewWrapper&gt; List { get; set; }\n\n    public DataTable DataTable { get; set; }\n\n    public MainViewModel()\n    {\n\n        this.DataTable = new DataTable();\n        DataTable.Columns.Add(new DataColumn(\"id\", typeof(int)));\n        DataTable.Columns.Add(new DataColumn(\"name\", typeof(string)));\n        for (int i = 0; i &lt; 10; i++)\n        {\n            var row = DataTable.NewRow();\n            row[\"id\"] = i;\n            row[\"name\"] = i.ToString();\n            DataTable.Rows.Add(row);\n        }\n\n        this.List = this.DataTable.DefaultView.OfType&lt;DataRowView&gt;()\n            .Select(p =&gt; new DataRowViewWrapper(p))\n            .ToList();\n    }\n}\n</code></pre> <p>Warning</p> <p>\u8fd9\u91cc\u4f7f\u7528\u4e86\u4e00\u4e2a\u666e\u901a <code>List</code> \u5b58\u50a8 <code>DataRowViewWrapper</code>\uff0c\u6ca1\u6709\u8003\u8651\u589e\u5220\u540c\u6b65\u903b\u8f91\u3002 \u5982\u679c\u9700\u8981\u53ef\u4ee5\u81ea\u884c\u5c01\u88c5\u4e00\u4e2a\u7c7b\u4f3c <code>DataView</code> \u7684\u7c7b\u578b\u3002</p> <p>\u7ed1\u5b9a\u793a\u4f8b</p> <pre><code>&lt;DataGrid AutoGenerateColumns=\"False\" ItemsSource=\"{Binding List}\"&gt;\n    &lt;DataGrid.Columns&gt;\n        &lt;DataGridTextColumn Header=\"id\" Binding=\"{ReflectionBinding name}\"/&gt;\n        &lt;DataGridTextColumn Header=\"name\" Binding=\"{ReflectionBinding name}\"/&gt;\n    &lt;/DataGrid.Columns&gt;\n&lt;/DataGrid&gt;\n</code></pre> <p>\u53c2\u8003\u94fe\u63a5</p> <ul> <li>Feature: ICustomTypeDescriptor support in bindings</li> <li>Bindings uses only \"dynamic\" properties when DataGrid item inherited from IReflectableType</li> </ul> <p>\ud83d\udc96 \u63d0\u4f9b\u8005 kongdetuo</p> <p>\ud83d\udd17 \u539f\u6587\u6863\u94fe\u63a5 \u3010Avalonia\u3011\u5982\u4f55\u7ed1\u5b9a DataTable</p> <p>\uff08\u5df2\u83b7\u5f97\u539f\u4f5c\u8005\u8bb8\u53ef,\u6709\u6539\u52a8\uff09</p>","tags":["Avalonia","Binding"]},{"location":"Avalonia/Binding/Data/hide-error-validation-before-first-input/","title":"\u5728\u9996\u6b21\u8f93\u5165\u524d\u9690\u85cf\u6570\u636e\u9a8c\u8bc1\u9519\u8bef","text":"<p>\u53ef\u4ee5\u7ed9\u6570\u636e\u63d0\u4f9b\u4e00\u4e2a\u4e0d\u53ef\u89c1\u5b57\u7b26\u4f5c\u4e3a\u521d\u59cb\u503c,\u5728\u70b9\u51fb\uff08\u6216\u83b7\u5f97\u7126\u70b9\uff09\u65f6\u5220\u9664\u8fd9\u4e2a\u5b57\u7b26\u3002</p> <p>Tip</p> <p>\u5176\u5b9e\u5927\u591a\u6570\u60c5\u51b5\u7a7a\u683c\u5c31\u8db3\u591f\u4e86</p> <p>Tip</p> <p>\u8bb0\u5f97\u5728\u63d0\u4ea4\u524d\u5bf9\u6240\u6709\u6570\u636e\u9a8c\u8bc1\u8f93\u5165\u6846\u518d\u8fdb\u884c\u4e00\u6b21\u4e0d\u53ef\u89c1\u5b57\u7b26\u5220\u9664</p> <p>\u53ef\u7528\u7684\u4e0d\u53ef\u89c1\u5b57\u7b26\u6709\uff1a</p> \u540d\u79f0 \u4ee3\u7801 \u5b9e\u4f53\u540d \u7b26\u53f7 \u5907\u6ce8 \u96f6\u5bbd\u5ea6\u7a7a\u683c U+200B <code>&amp;ZeroWidthSpace;</code> <code>\u200b</code> \u63a8\u8350\u4f7f\u7528 \u96f6\u5bbd\u5ea6\u975e\u8fde\u63a5\u7b26 U+200C <code>&amp;zwnj;</code> <code>\u200c</code> \u4e0d\u63a8\u8350\u4f7f\u7528\uff0c\u4f1a\u4e0e\u4e0a\u4e00\u4e2a\u5b57\u7b26\u7c98\u8fde \u96f6\u5bbd\u5ea6\u8fde\u63a5\u7b26 U+200D <code>&amp;zwj;</code> <code>\u200d</code> \u4e0d\u5efa\u8bae\u7528\u4e8e\u53ef\u8f93\u5165\u82f1\u6587\u7684\u8f93\u5165\u6846 \u96f6\u5bbd\u5ea6\u8bcd\u8fde\u63a5\u7b26 U+2060 <code>&amp;NoBreak;</code> <code>\u2060</code> \u4e0d\u5efa\u8bae\u7528\u4e8e\u53ef\u8f93\u5165\u82f1\u6587\u7684\u8f93\u5165\u6846 \u96f6\u5bbd\u5ea6\u4e0d\u95f4\u65ad\u7a7a\u683c U+FEFF --- <code>\ufeff</code> \u4e0d\u63a8\u8350\u7528\u4e8e\u4e0d\u95f4\u65ad\u6307\u793a","tags":["Avalonia","Binding","Data","Data Validation"]},{"location":"Avalonia/Binding/Event/why-textbox-keydown-event-not-triggering/","title":"\u4e3a\u4ec0\u4e48 TextBox \u7684 KeyDown \u4e8b\u4ef6\u6ca1\u6709\u89e6\u53d1\uff1f","text":"<p>\u56e0\u4e3a TextBox \u4f1a\u81ea\u884c\u5904\u7406 KeyDown \u4e8b\u4ef6\uff0c\u5982\u679c\u9700\u8981\u5728 TextBox \u4e4b\u524d\u5904\u7406\u4e8b\u4ef6\uff0c\u9700\u8981\u6ce8\u518c\u96a7\u9053\u4e8b\u4ef6\uff1a</p> <pre><code>target.AddHandler(InputElement.KeyDownEvent, OnTextBoxKeyDown, RoutingStrategies.Tunnel);\n\nvoid OnTextBoxKeyDown(object sender, KeyEventArgs e)\n{\n    // \u5904\u7406\u7a0b\u5e8f\u4ee3\u7801\n}\n</code></pre> <p>\ud83d\udc96 \u63d0\u4f9b\u8005 kongdetuo</p> <p>\ud83d\udd17 \u539f\u6587\u6863\u94fe\u63a5 Avalonia \u5e38\u89c1\u95ee\u9898</p> <p>\uff08\u5df2\u83b7\u5f97\u539f\u4f5c\u8005\u8bb8\u53ef,\u6709\u6539\u52a8\uff09</p>","tags":["Avalonia","Event"]},{"location":"Avalonia/Multi%20OS/avalonia-app-linux-double-click-not-open/","title":"\u4e3a\u4ec0\u4e48 Avalonia \u7a0b\u5e8f\u5728 Linux \u73af\u5883\u4e0b\u65e0\u6cd5\u53cc\u51fb\u6253\u5f00","text":"<p>\u56e0\u4e3a .desktop \u88ab\u8bc6\u522b\u6210\u540e\u7f00\u540d\u4e86\uff0c\u5220\u9664\u5c31\u597d</p> <p>\ud83d\udc96 \u63d0\u4f9b\u8005 kongdetuo</p> <p>\ud83d\udd17 \u539f\u6587\u6863\u94fe\u63a5 Avalonia \u5e38\u89c1\u95ee\u9898</p> <p>\uff08\u5df2\u83b7\u5f97\u539f\u4f5c\u8005\u8bb8\u53ef,\u6709\u6539\u52a8\uff09</p>","tags":["Avalonia","Linux"]},{"location":"Avalonia/Style/-pointerover-setting-color-not-working/","title":"\u4e3a\u4ec0\u4e48 <code>:pointerover</code> \u8bbe\u7f6e\u80cc\u666f\u8272\u6ca1\u6709\u751f\u6548","text":"","tags":["Avalonia","Xaml","Style"]},{"location":"Avalonia/Style/-pointerover-setting-color-not-working/#_1","title":"\u5feb\u901f\u4fee\u590d","text":"<p>\u56e0\u4e3a\u4f60\u7684\u6837\u5f0f\u4f18\u5148\u7ea7\u6bd4\u8f83\u4f4e\uff0c\u9700\u8981\u5199\u8be6\u7ec6\u4e00\u4e9b\u624d\u80fd\u8986\u76d6\u4e3b\u9898\u4e2d\u7684\u6837\u5f0f:</p> <pre><code>&lt;Style Selector=\"Button:pointerover /template/ ContentPresenter#PART_ContentPresenter\"&gt;\n    &lt;Setter Property=\"Background\" Value=\"Orange\" /&gt;\n&lt;/Style&gt;\n</code></pre>","tags":["Avalonia","Xaml","Style"]},{"location":"Avalonia/Style/-pointerover-setting-color-not-working/#_2","title":"\u7ec6\u8282","text":"<p>\u8fd9\u662f\u4e3a\u4e86\u4fdd\u8bc1\u80cc\u666f\u8272\u7b49\u5c5e\u6027\u7684\u54cd\u5e94\u6027\u3002 \u5982\u679c\u6a21\u677f\u6309\u4e0b\u9762\u8fd9\u79cd\u5199\u6cd5\uff1a</p> <pre><code>&lt;ControlTemplate&gt;\n    &lt;ContentPresenter x:Name=\"PART_ContentPresenter\"\n                      Background=\"{TemplateBinding Background}\"/&gt;\n&lt;/ControlTemplate&gt;\n</code></pre> <p>\u5f53\u7528\u6237\u76f4\u63a5\u8bbe\u7f6e Background = \"Red\" \u540e\uff0c\u9f20\u6807\u653e\u4e0a\u53bb\u65e0\u6cd5\u53d8\u8272\uff0c\u8fd9\u5c31\u5931\u53bb\u4e86\u54cd\u5e94\u80fd\u529b\u3002\u4e3a\u4e86\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\uff0c\u5f00\u53d1\u7ec4\u5728\u81ea\u5e26\u7684\u6837\u5f0f\u4e2d\u5199\u4e86\u6bd4\u8f83\u9ad8\u4f18\u5148\u7ea7\u7684\u9009\u62e9\u5668\uff0c\u5bfc\u81f4\u4e86\u91cd\u5199\u6837\u5f0f\u9700\u8981\u5199\u8fd9\u4e48\u4e00\u957f\u4e32\u3002</p> <p>\ud83d\udc96 \u63d0\u4f9b\u8005 kongdetuo</p> <p>\ud83d\udd17 \u539f\u6587\u6863\u94fe\u63a5 Avalonia \u5e38\u89c1\u95ee\u9898</p> <p>\uff08\u5df2\u83b7\u5f97\u539f\u4f5c\u8005\u8bb8\u53ef,\u6709\u6539\u52a8\uff09</p>","tags":["Avalonia","Xaml","Style"]},{"location":"Avalonia/Style/datagrid-not-displaying/","title":"\u4e3a\u4ec0\u4e48 <code>DataGrid</code> \u6ca1\u6709\u663e\u793a","text":"<p>\u8bf7\u68c0\u67e5\u662f\u5426\u5728App.axaml\u4e2d\u5f15\u5165\u4e86\u6837\u5f0f</p> <pre><code>&lt;Application.Styles&gt;\n    &lt;StyleInclude Source=\"avares://Avalonia.Controls.DataGrid/Themes/Fluent.xaml\"/&gt;\n&lt;/Application.Styles&gt;\n</code></pre> <p>\ud83d\udc96 \u63d0\u4f9b\u8005 kongdetuo</p> <p>\ud83d\udd17 \u539f\u6587\u6863\u94fe\u63a5 Avalonia \u5e38\u89c1\u95ee\u9898</p> <p>\uff08\u5df2\u83b7\u5f97\u539f\u4f5c\u8005\u8bb8\u53ef,\u6709\u6539\u52a8\uff09</p>","tags":["Avalonia","Xaml","Style"]},{"location":"Avalonia/Style/is-there-a-trigger-in-avalonia/","title":"Avalonia \u4e2d\u6709 <code>Trigger</code> \u5417\uff1f","text":"<p>\u6ca1\u6709\u3002\u4e0b\u9762\u6709\u4e00\u4e9b\u66ff\u4ee3\u54c1\uff1a</p> <ul> <li>\u9009\u62e9\u5668\u8bed\u6cd5</li> <li>\u6837\u5f0f\u7c7b\u7ed1\u5b9a</li> <li>\u57fa\u4e8eBehavior\u7684DataTrigger</li> </ul> <p>\ud83d\udc96 \u63d0\u4f9b\u8005 kongdetuo</p> <p>\ud83d\udd17 \u539f\u6587\u6863\u94fe\u63a5 Avalonia \u5e38\u89c1\u95ee\u9898</p> <p>\uff08\u5df2\u83b7\u5f97\u539f\u4f5c\u8005\u8bb8\u53ef,\u6709\u6539\u52a8\uff09</p>","tags":["Avalonia","Xaml","Style"]}]}